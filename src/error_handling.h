/**
 * @file error_handling.h
 * @brief Error handling system for the HOIL compiler
 * 
 * This file provides a centralized error reporting and tracking system
 * for the HOIL to COIL compiler.
 *
 * @author Generated by Claude
 * @date 2025-03-13
 */

#ifndef ERROR_HANDLING_H
#define ERROR_HANDLING_H

#include <stdbool.h>

/**
 * @brief Error codes for various compiler stages
 */
typedef enum {
  ERROR_NONE = 0,              /**< No error */
  ERROR_INVALID_ARGUMENT,      /**< Invalid function argument */
  ERROR_MEMORY,                /**< Memory allocation failure */
  ERROR_IO,                    /**< I/O error */
  ERROR_LEXICAL,               /**< Lexical error (scanning) */
  ERROR_SYNTAX,                /**< Syntax error (parsing) */
  ERROR_SEMANTIC,              /**< Semantic error (type checking, etc.) */
  ERROR_CODEGEN,               /**< Code generation error */
  ERROR_INTERNAL,              /**< Internal compiler error */
  ERROR_SECURITY
} error_code_t;

/**
 * @brief Initialize the error handling system
 * 
 * @param verbose Enable verbose error messages
 * @param debug Enable additional debug information
 */
void error_init(bool verbose, bool debug);

/**
 * @brief Report an error
 * 
 * @param code Error code
 * @param format Format string (printf style)
 * @param ... Variable arguments
 */
void error_report(error_code_t code, const char* format, ...);

/**
 * @brief Check if any errors have occurred
 * 
 * @return true if errors have occurred, false otherwise
 */
bool error_occurred(void);

/**
 * @brief Get the number of errors that have occurred
 * 
 * @return Number of errors
 */
int error_count(void);

/**
 * @brief Get the last error code
 * 
 * @return Last error code
 */
error_code_t error_last_code(void);

/**
 * @brief Get the last error message
 * 
 * @return Last error message or NULL if no errors
 */
const char* error_last_message(void);

/**
 * @brief Reset error state
 */
void error_reset(void);

#endif /* ERROR_HANDLING_H */