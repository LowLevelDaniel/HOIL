/**
 * @file coil_binary.h
 * @brief COIL binary format generator
 * 
 * This file defines the interface for generating COIL binary format
 * from AST representation of HOIL code.
 *
 * @author Generated by Claude
 * @date 2025-03-13
 */

#ifndef COIL_BINARY_H
#define COIL_BINARY_H

#include "ast.h"
#include <stdint.h>
#include <stddef.h>

/**
 * @brief Magic number for COIL binary format ("COIL" in ASCII)
 */
#define COIL_MAGIC 0x434F494C

/**
 * @brief COIL version (major.minor.patch as 8.8.16 bits)
 */
#define COIL_VERSION ((1 << 24) | (0 << 16) | 0)

/**
 * @brief COIL binary section types
 */
typedef enum {
  SECTION_TYPE = 1,       /**< Type definitions */
  SECTION_FUNCTION,       /**< Function declarations */
  SECTION_GLOBAL,         /**< Global variables */
  SECTION_CONSTANT,       /**< Constants */
  SECTION_CODE,           /**< Function implementations */
  SECTION_RELOCATION,     /**< Relocation information */
  SECTION_METADATA        /**< Additional metadata */
} section_type_t;

/**
 * @brief COIL binary format structure
 */
typedef struct {
  uint8_t* data;          /**< Binary data buffer */
  size_t size;            /**< Size of binary data in bytes */
  size_t capacity;        /**< Capacity of binary data buffer */
} coil_binary_t;

/**
 * @brief Generate COIL binary format from AST
 * 
 * @param module AST module to convert
 * @return Generated COIL binary or NULL on error
 */
coil_binary_t* coil_binary_generate(ast_module_t* module);

/**
 * @brief Destroy a COIL binary and free resources
 * 
 * @param binary Binary to destroy
 */
void coil_binary_destroy(coil_binary_t* binary);

/**
 * @brief Write a COIL binary to file
 * 
 * @param binary Binary to write
 * @param filename Output filename
 * @return true if successful, false otherwise
 */
bool coil_binary_write(const coil_binary_t* binary, const char* filename);

/**
 * @brief Read a COIL binary from file
 * 
 * @param filename Input filename
 * @return Read binary or NULL on error
 */
coil_binary_t* coil_binary_read(const char* filename);

/**
 * @brief Encode a COIL type
 * 
 * @param type AST type to encode
 * @return 32-bit type encoding
 */
uint32_t coil_encode_type(const ast_type_t* type);

/**
 * @brief Decode a COIL type
 * 
 * @param encoded Encoded 32-bit type
 * @return Decoded AST type or NULL on error
 */
ast_type_t* coil_decode_type(uint32_t encoded);

/**
 * @brief Get the size of a type in bytes
 * 
 * @param type Type to check
 * @return Size in bytes
 */
uint32_t coil_type_size(const ast_type_t* type);

/**
 * @brief Get the alignment of a type in bytes
 * 
 * @param type Type to check
 * @return Alignment in bytes
 */
uint32_t coil_type_alignment(const ast_type_t* type);

#endif /* COIL_BINARY_H */