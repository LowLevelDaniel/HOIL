/**
 * @file symbol_table.h
 * @brief Symbol table for tracking identifiers in HOIL
 * 
 * This file defines the interface for the symbol table that tracks
 * identifiers and their associated information during parsing.
 *
 * @author Generated by Claude
 * @date 2025-03-13
 */

#ifndef SYMBOL_TABLE_H
#define SYMBOL_TABLE_H

#include "ast.h"
#include <stdbool.h>
#include <stddef.h>

/**
 * @brief Symbol table structure
 */
typedef struct symbol_table_t symbol_table_t;

/**
 * @brief Symbol kinds
 */
typedef enum {
  SYMBOL_TYPE,            /**< Type definition */
  SYMBOL_CONSTANT,        /**< Constant */
  SYMBOL_GLOBAL,          /**< Global variable */
  SYMBOL_FUNCTION,        /**< Function */
  SYMBOL_PARAMETER,       /**< Function parameter */
  SYMBOL_LOCAL,           /**< Local variable */
  SYMBOL_BLOCK            /**< Basic block label */
} symbol_kind_t;

/**
 * @brief Symbol entry structure
 */
typedef struct {
  const char* name;       /**< Symbol name */
  symbol_kind_t kind;     /**< Symbol kind */
  
  union {
    ast_type_def_t* type_def;      /**< Type definition */
    ast_constant_t* constant;      /**< Constant */
    ast_global_t* global;          /**< Global variable */
    ast_function_t* function;      /**< Function */
    ast_parameter_t* parameter;    /**< Function parameter */
    ast_operand_t* local;          /**< Local variable */
    ast_basic_block_t* block;      /**< Basic block */
  };
  
  size_t scope_level;     /**< Scope level (0 for global) */
  size_t line;            /**< Line where defined */
  size_t column;          /**< Column where defined */
} symbol_entry_t;

/**
 * @brief Create a new symbol table
 * 
 * @return Pointer to created symbol table or NULL on failure
 */
symbol_table_t* symbol_table_create(void);

/**
 * @brief Destroy a symbol table and free resources
 * 
 * @param table Symbol table to destroy
 */
void symbol_table_destroy(symbol_table_t* table);

/**
 * @brief Enter a new scope level
 * 
 * @param table Symbol table
 * @return Current scope level
 */
size_t symbol_table_enter_scope(symbol_table_t* table);

/**
 * @brief Exit the current scope level
 * 
 * @param table Symbol table
 * @return New current scope level
 */
size_t symbol_table_exit_scope(symbol_table_t* table);

/**
 * @brief Get the current scope level
 * 
 * @param table Symbol table
 * @return Current scope level
 */
size_t symbol_table_scope_level(const symbol_table_t* table);

/**
 * @brief Add a type definition to the symbol table
 * 
 * @param table Symbol table
 * @param name Type name
 * @param type_def Type definition
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_type(symbol_table_t* table, const char* name, 
                           ast_type_def_t* type_def, size_t line, size_t column);

/**
 * @brief Add a constant to the symbol table
 * 
 * @param table Symbol table
 * @param name Constant name
 * @param constant Constant definition
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_constant(symbol_table_t* table, const char* name, 
                               ast_constant_t* constant, size_t line, size_t column);

/**
 * @brief Add a global variable to the symbol table
 * 
 * @param table Symbol table
 * @param name Global name
 * @param global Global definition
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_global(symbol_table_t* table, const char* name, 
                             ast_global_t* global, size_t line, size_t column);

/**
 * @brief Add a function to the symbol table
 * 
 * @param table Symbol table
 * @param name Function name
 * @param function Function definition
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_function(symbol_table_t* table, const char* name, 
                               ast_function_t* function, size_t line, size_t column);

/**
 * @brief Add a function parameter to the symbol table
 * 
 * @param table Symbol table
 * @param name Parameter name
 * @param parameter Parameter definition
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_parameter(symbol_table_t* table, const char* name, 
                                ast_parameter_t* parameter, size_t line, size_t column);

/**
 * @brief Add a local variable to the symbol table
 * 
 * @param table Symbol table
 * @param name Local variable name
 * @param local Local variable
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_local(symbol_table_t* table, const char* name, 
                            ast_operand_t* local, size_t line, size_t column);

/**
 * @brief Add a basic block to the symbol table
 * 
 * @param table Symbol table
 * @param name Block name
 * @param block Basic block
 * @param line Line where defined
 * @param column Column where defined
 * @return true if successful, false if name already exists in the current scope
 */
bool symbol_table_add_block(symbol_table_t* table, const char* name, 
                            ast_basic_block_t* block, size_t line, size_t column);

/**
 * @brief Lookup a symbol by name
 * 
 * @param table Symbol table
 * @param name Symbol name
 * @return Symbol entry or NULL if not found
 */
const symbol_entry_t* symbol_table_lookup(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a type by name
 * 
 * @param table Symbol table
 * @param name Type name
 * @return Type definition or NULL if not found
 */
ast_type_def_t* symbol_table_lookup_type(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a constant by name
 * 
 * @param table Symbol table
 * @param name Constant name
 * @return Constant or NULL if not found
 */
ast_constant_t* symbol_table_lookup_constant(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a global variable by name
 * 
 * @param table Symbol table
 * @param name Global name
 * @return Global variable or NULL if not found
 */
ast_global_t* symbol_table_lookup_global(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a function by name
 * 
 * @param table Symbol table
 * @param name Function name
 * @return Function or NULL if not found
 */
ast_function_t* symbol_table_lookup_function(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a local variable or parameter by name
 * 
 * @param table Symbol table
 * @param name Variable name
 * @return Operand or NULL if not found
 */
ast_operand_t* symbol_table_lookup_variable(const symbol_table_t* table, const char* name);

/**
 * @brief Lookup a basic block by name
 * 
 * @param table Symbol table
 * @param name Block name
 * @return Basic block or NULL if not found
 */
ast_basic_block_t* symbol_table_lookup_block(const symbol_table_t* table, const char* name);

#endif /* SYMBOL_TABLE_H */